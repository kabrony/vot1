name: VOT1 CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: 'Run the workflow with debug enabled'
        required: false
        default: false

jobs:
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, '3.10']

    steps:
      - uses: actions/checkout@v3
      
      - name: 🐍 Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      
      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
      
      - name: 🔍 Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      
      - name: 🧪 Test with pytest
        run: |
          pytest --cov=src
      
      - name: 📊 Upload coverage report
        uses: codecov/codecov-action@v3
        with:
          fail_ci_if_error: false

  build-documentation:
    name: 📚 Build Documentation
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install sphinx sphinx_rtd_theme myst-parser
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      
      - name: 🔨 Build documentation
        run: |
          cd docs
          make html
      
      - name: 💾 Store documentation artifact
        uses: actions/upload-artifact@v3
        with:
          name: documentation
          path: docs/_build/html

  build-docker:
    name: 🐳 Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v3
      
      - name: 🔖 Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: 🔑 Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 📅 Get current date
        id: date
        run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
      
      - name: 🏗️ Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:latest
            ghcr.io/${{ github.repository }}:${{ steps.date.outputs.date }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-docs:
    name: 🚀 Deploy Documentation
    runs-on: ubuntu-latest
    needs: build-documentation
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: 📦 Download documentation
        uses: actions/download-artifact@v3
        with:
          name: documentation
          path: docs-site
      
      - name: 🚀 Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: docs-site
          branch: gh-pages 