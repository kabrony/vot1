{
  "total_files": 12,
  "total_lines": 5038,
  "total_blank_lines": 859,
  "total_comment_lines": 375,
  "total_code_lines": 3804,
  "total_classes": 27,
  "total_functions": 145,
  "unique_import_count": 66,
  "unique_imports": [
    "typing.Optional",
    "flask_socketio.SocketIO",
    "mcp_tools.call_mcp_function",
    "flask.g",
    "scripts.mcp_hybrid_automation.McpHybridAutomation",
    "os",
    "server.create_dashboard",
    "mcp_hybrid_api.mcp_hybrid_bp",
    "typing.Union",
    "routes.init_routes",
    "pathlib.Path",
    "logging",
    "flask.Flask",
    "datetime.datetime",
    "integrations.composio.openapi.OpenAPIComposioIntegration",
    "werkzeug.utils.secure_filename",
    "functools.wraps",
    "flask.jsonify",
    "dotenv.load_dotenv",
    "vot_mcp.VotModelControlProtocol",
    "time",
    "typing.Any",
    "flask.request",
    "typing.Dict",
    "flask.Blueprint",
    "api.dev_assistant_api.init_dev_assistant_api",
    "flask.Response",
    "memory.MemoryManager",
    "ast",
    "io",
    "tempfile",
    "integrations.perplexity.PerplexitySearch",
    "typing.List",
    "vot1.dashboard.api.init_api",
    "json",
    "api.api_bp",
    "vot1.dashboard.server.main",
    "flask.views.MethodView",
    "utils.mcp_tools.call_mcp_function",
    "api.mcp_handler.init_mcp_api",
    "re",
    "flask.stream_with_context",
    "integrations.composio.openapi.create_openapi_integration",
    "integrations.composio.ComposioClient",
    "scripts.github_ecosystem_analyzer.GitHubEcosystemAnalyzer",
    "uuid",
    "scripts.github_update_automation.GitHubUpdateAutomation",
    "github_ecosystem_api.github_ecosystem_bp",
    "vot1.client.EnhancedClaudeClient",
    "api.init_api",
    "functools.lru_cache",
    "vot1.dashboard.api.api_bp",
    "utils.dev_assistant.init_dev_assistant",
    "sys",
    "importlib",
    "argparse",
    "asyncio",
    "src.vot1.dashboard.server.main",
    "typing.Callable",
    "flask.current_app",
    "traceback",
    "inspect",
    "vot1.memory.MemoryManager",
    "server.DashboardServer",
    "flask.render_template",
    "mcp_hybrid_api.init_mcp_hybrid_api"
  ],
  "files": [
    {
      "file_path": "src/vot1/dashboard/app.py",
      "imports": [
        "os",
        "sys",
        "logging",
        "pathlib.Path",
        "src.vot1.dashboard.server.main",
        "vot1.dashboard.server.main"
      ],
      "classes": [],
      "functions": [
        "main"
      ],
      "total_lines": 57,
      "blank_lines": 9,
      "comment_lines": 7,
      "code_lines": 41,
      "import_count": 6,
      "class_count": 0,
      "function_count": 1
    },
    {
      "file_path": "src/vot1/dashboard/mcp_hybrid_api.py",
      "imports": [
        "json",
        "logging",
        "time",
        "flask.Blueprint",
        "flask.jsonify",
        "flask.request",
        "flask.Response",
        "flask.stream_with_context",
        "flask.current_app",
        "flask.views.MethodView"
      ],
      "classes": [
        "MCPHybridAPI"
      ],
      "functions": [
        "init_mcp_hybrid_api",
        "get_recent_memories",
        "add_test_memory",
        "get",
        "post",
        "generate"
      ],
      "total_lines": 270,
      "blank_lines": 38,
      "comment_lines": 24,
      "code_lines": 208,
      "import_count": 10,
      "class_count": 1,
      "function_count": 6
    },
    {
      "file_path": "src/vot1/dashboard/api.py",
      "imports": [
        "os",
        "json",
        "time",
        "logging",
        "uuid",
        "io",
        "tempfile",
        "datetime.datetime",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "typing.Union",
        "werkzeug.utils.secure_filename",
        "flask.Blueprint",
        "flask.request",
        "flask.jsonify",
        "flask.current_app",
        "flask.g",
        "flask.stream_with_context",
        "flask.Response",
        "flask.views.MethodView",
        "vot_mcp.VotModelControlProtocol",
        "memory.MemoryManager",
        "asyncio",
        "mcp_hybrid_api.init_mcp_hybrid_api",
        "integrations.composio.openapi.OpenAPIComposioIntegration",
        "integrations.perplexity.PerplexitySearch",
        "scripts.mcp_hybrid_automation.McpHybridAutomation",
        "integrations.composio.openapi.OpenAPIComposioIntegration",
        "integrations.composio.ComposioClient",
        "integrations.composio.ComposioClient",
        "integrations.composio.ComposioClient",
        "integrations.composio.ComposioClient",
        "integrations.composio.ComposioClient",
        "integrations.composio.openapi.create_openapi_integration",
        "integrations.composio.openapi.create_openapi_integration",
        "integrations.composio.openapi.create_openapi_integration",
        "integrations.composio.openapi.create_openapi_integration"
      ],
      "classes": [
        "MemoryAPI",
        "VisualizationDataAPI",
        "StatsAPI",
        "WebSearchAPI",
        "OWLReasoningAPI",
        "OpenAPIIntegrationAPI",
        "OpenAPIToolAPI",
        "ComposioStatusAPI",
        "RepositoryUsageAPI",
        "PerplexitySearchAPI",
        "PerplexityAnswerAPI",
        "PerplexitySummarizeAPI",
        "ComposioModelsAPI",
        "ComposioGenerateAPI",
        "ComposioEmbeddingAPI",
        "ComposioStatusAPI",
        "ComposioUsageAPI"
      ],
      "functions": [
        "init_api",
        "_update_system_stats",
        "process_chat_message",
        "get_available_models",
        "get_system_prompt",
        "get_memory_context",
        "format_memory_references",
        "extract_visualization_commands",
        "get_conversation_history",
        "save_conversation",
        "format_conversation_history",
        "register_api_routes",
        "submit_feedback",
        "stream_feedback_response",
        "get",
        "post",
        "delete",
        "get",
        "get",
        "post",
        "post",
        "__init__",
        "post",
        "__init__",
        "post",
        "__init__",
        "post",
        "_get_composio_client",
        "get",
        "_get_composio_client",
        "post",
        "_get_composio_client",
        "post",
        "_get_composio_client",
        "get",
        "_get_composio_client",
        "get",
        "generate"
      ],
      "total_lines": 1743,
      "blank_lines": 349,
      "comment_lines": 105,
      "code_lines": 1289,
      "import_count": 39,
      "class_count": 17,
      "function_count": 38
    },
    {
      "file_path": "src/vot1/dashboard/server.py",
      "imports": [
        "os",
        "logging",
        "argparse",
        "typing.Dict",
        "typing.Any",
        "flask.Flask",
        "flask.render_template",
        "flask.request",
        "flask.jsonify",
        "flask_socketio.SocketIO",
        "dotenv.load_dotenv",
        "vot1.client.EnhancedClaudeClient",
        "vot1.memory.MemoryManager",
        "vot1.dashboard.api.api_bp",
        "vot1.dashboard.api.init_api"
      ],
      "classes": [],
      "functions": [
        "init_vot1_components",
        "index",
        "status",
        "page_not_found",
        "server_error",
        "parse_args",
        "main"
      ],
      "total_lines": 151,
      "blank_lines": 28,
      "comment_lines": 15,
      "code_lines": 108,
      "import_count": 15,
      "class_count": 0,
      "function_count": 7
    },
    {
      "file_path": "src/vot1/dashboard/routes.py",
      "imports": [
        "logging",
        "flask.render_template",
        "flask.request",
        "flask.jsonify",
        "flask.Blueprint"
      ],
      "classes": [],
      "functions": [
        "index",
        "status",
        "index",
        "memory",
        "cyberpunk_chat",
        "visualization",
        "settings",
        "init_routes"
      ],
      "total_lines": 62,
      "blank_lines": 12,
      "comment_lines": 4,
      "code_lines": 46,
      "import_count": 5,
      "class_count": 0,
      "function_count": 8
    },
    {
      "file_path": "src/vot1/dashboard/__init__.py",
      "imports": [
        "os",
        "logging",
        "typing.Optional",
        "typing.Union",
        "pathlib.Path",
        "flask.Flask",
        "flask_socketio.SocketIO",
        "routes.init_routes",
        "api.mcp_handler.init_mcp_api",
        "api.dev_assistant_api.init_dev_assistant_api",
        "server.DashboardServer",
        "server.create_dashboard",
        "api.api_bp",
        "api.init_api",
        "mcp_hybrid_api.mcp_hybrid_bp",
        "github_ecosystem_api.github_ecosystem_bp",
        "memory.MemoryManager"
      ],
      "classes": [
        "DashboardServer",
        "MemoryManager"
      ],
      "functions": [
        "ensure_static_files",
        "create_app",
        "init_routes",
        "init_mcp_api",
        "init_dev_assistant_api",
        "create_dashboard",
        "init_api",
        "__init__",
        "start",
        "__init__"
      ],
      "total_lines": 244,
      "blank_lines": 41,
      "comment_lines": 24,
      "code_lines": 179,
      "import_count": 17,
      "class_count": 2,
      "function_count": 10
    },
    {
      "file_path": "src/vot1/dashboard/github_ecosystem_api.py",
      "imports": [
        "flask.Blueprint",
        "flask.request",
        "flask.jsonify",
        "flask.current_app",
        "flask.views.MethodView",
        "asyncio",
        "sys",
        "os",
        "json",
        "logging",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "typing.Union",
        "time",
        "scripts.github_ecosystem_analyzer.GitHubEcosystemAnalyzer",
        "scripts.github_update_automation.GitHubUpdateAutomation"
      ],
      "classes": [
        "GitHubEcosystemAPI"
      ],
      "functions": [
        "__init__",
        "_initialize_analyzer",
        "_initialize_updater",
        "handle_request",
        "_handle_status",
        "get",
        "post",
        "_handle_analyze_repository",
        "_handle_analyze_ecosystem",
        "_handle_generate_improvement_plan",
        "_handle_update_repository",
        "_handle_get_update_status"
      ],
      "total_lines": 573,
      "blank_lines": 88,
      "comment_lines": 44,
      "code_lines": 441,
      "import_count": 18,
      "class_count": 1,
      "function_count": 12
    },
    {
      "file_path": "src/vot1/dashboard/api/mcp_handler.py",
      "imports": [
        "logging",
        "json",
        "os",
        "functools.wraps",
        "flask.Blueprint",
        "flask.request",
        "flask.jsonify",
        "flask.current_app",
        "time",
        "time"
      ],
      "classes": [],
      "functions": [
        "handle_errors",
        "check_perplexity_connection",
        "check_firecrawl_connection",
        "connect_perplexity",
        "connect_firecrawl",
        "perplexity_search",
        "firecrawl_crawl",
        "init_mcp_api",
        "decorated_function"
      ],
      "total_lines": 245,
      "blank_lines": 34,
      "comment_lines": 54,
      "code_lines": 157,
      "import_count": 10,
      "class_count": 0,
      "function_count": 9
    },
    {
      "file_path": "src/vot1/dashboard/api/mcp_handler_production.py",
      "imports": [
        "logging",
        "json",
        "os",
        "functools.wraps",
        "flask.Blueprint",
        "flask.request",
        "flask.jsonify",
        "flask.current_app",
        "mcp_tools.call_mcp_function",
        "mcp_tools.call_mcp_function",
        "mcp_tools.call_mcp_function",
        "mcp_tools.call_mcp_function",
        "mcp_tools.call_mcp_function",
        "mcp_tools.call_mcp_function"
      ],
      "classes": [],
      "functions": [
        "handle_errors",
        "check_perplexity_connection",
        "check_firecrawl_connection",
        "connect_perplexity",
        "connect_firecrawl",
        "perplexity_search",
        "firecrawl_crawl",
        "init_mcp_api",
        "decorated_function"
      ],
      "total_lines": 327,
      "blank_lines": 46,
      "comment_lines": 31,
      "code_lines": 250,
      "import_count": 14,
      "class_count": 0,
      "function_count": 9
    },
    {
      "file_path": "src/vot1/dashboard/api/dev_assistant_api.py",
      "imports": [
        "os",
        "sys",
        "json",
        "logging",
        "functools.wraps",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "pathlib.Path",
        "flask.Blueprint",
        "flask.jsonify",
        "flask.request",
        "flask.current_app",
        "utils.dev_assistant.init_dev_assistant"
      ],
      "classes": [],
      "functions": [
        "get_dev_assistant",
        "handle_errors",
        "status",
        "analyze_codebase",
        "research",
        "generate_script",
        "troubleshoot",
        "analyze_architecture",
        "read_file",
        "list_memory",
        "get_memory",
        "save_script",
        "delete_memory",
        "init_dev_assistant_api",
        "decorated_function"
      ],
      "total_lines": 373,
      "blank_lines": 69,
      "comment_lines": 11,
      "code_lines": 293,
      "import_count": 14,
      "class_count": 0,
      "function_count": 15
    },
    {
      "file_path": "src/vot1/dashboard/utils/mcp_tools.py",
      "imports": [
        "logging",
        "os",
        "importlib",
        "inspect",
        "json",
        "functools.lru_cache"
      ],
      "classes": [
        "MCPError"
      ],
      "functions": [
        "get_mcp_function",
        "call_mcp_function",
        "mock_mcp_response"
      ],
      "total_lines": 228,
      "blank_lines": 24,
      "comment_lines": 11,
      "code_lines": 193,
      "import_count": 6,
      "class_count": 1,
      "function_count": 3
    },
    {
      "file_path": "src/vot1/dashboard/utils/dev_assistant.py",
      "imports": [
        "os",
        "sys",
        "json",
        "logging",
        "inspect",
        "importlib",
        "pathlib.Path",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Union",
        "typing.Any",
        "typing.Callable",
        "datetime.datetime",
        "ast",
        "traceback",
        "memory.MemoryManager",
        "api.mcp_handler.init_mcp_api",
        "utils.mcp_tools.call_mcp_function",
        "utils.mcp_tools.call_mcp_function",
        "utils.mcp_tools.call_mcp_function",
        "utils.mcp_tools.call_mcp_function",
        "re",
        "utils.mcp_tools.call_mcp_function",
        "utils.mcp_tools.call_mcp_function",
        "memory.MemoryManager"
      ],
      "classes": [
        "CodeAnalysis",
        "PerplexityResearcher",
        "MemorySubsystem",
        "ScriptGenerator",
        "DevelopmentAssistant"
      ],
      "functions": [
        "init_dev_assistant",
        "extract_imports",
        "extract_classes_and_functions",
        "analyze_dependencies",
        "scan_directory",
        "__init__",
        "connect",
        "research",
        "__init__",
        "store",
        "_store_basic",
        "retrieve",
        "_retrieve_basic",
        "list_categories",
        "_list_categories_basic",
        "list_keys",
        "_list_keys_basic",
        "__init__",
        "generate_script",
        "save_script_to_file",
        "__init__",
        "analyze_codebase",
        "research_topic",
        "generate_script",
        "save_script",
        "troubleshoot_code",
        "analyze_project_architecture"
      ],
      "total_lines": 765,
      "blank_lines": 121,
      "comment_lines": 45,
      "code_lines": 599,
      "import_count": 26,
      "class_count": 5,
      "function_count": 27
    }
  ],
  "potential_issues": [
    {
      "type": "large_file",
      "file": "src/vot1/dashboard/api.py",
      "line_count": 1743,
      "message": "File src/vot1/dashboard/api.py is very large (1743 lines). Consider refactoring."
    },
    {
      "type": "large_file",
      "file": "src/vot1/dashboard/github_ecosystem_api.py",
      "line_count": 573,
      "message": "File src/vot1/dashboard/github_ecosystem_api.py is very large (573 lines). Consider refactoring."
    },
    {
      "type": "large_file",
      "file": "src/vot1/dashboard/utils/dev_assistant.py",
      "line_count": 765,
      "message": "File src/vot1/dashboard/utils/dev_assistant.py is very large (765 lines). Consider refactoring."
    },
    {
      "type": "high_class_count",
      "file": "src/vot1/dashboard/api.py",
      "class_count": 17,
      "message": "File src/vot1/dashboard/api.py has 17 classes. Consider splitting it up."
    },
    {
      "type": "high_function_count",
      "file": "src/vot1/dashboard/api.py",
      "function_count": 38,
      "message": "File src/vot1/dashboard/api.py has 38 functions. Consider refactoring."
    },
    {
      "type": "high_function_count",
      "file": "src/vot1/dashboard/utils/dev_assistant.py",
      "function_count": 27,
      "message": "File src/vot1/dashboard/utils/dev_assistant.py has 27 functions. Consider refactoring."
    }
  ]
}