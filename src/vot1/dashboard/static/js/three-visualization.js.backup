/**
 * VOT1 Dashboard - THREE.js Memory Visualization
 * Version 3.0 (2025)
 * 
 * This module implements an interactive 3D visualization of the VOT1 memory system
 * using THREE.js r173 with advanced cyberpunk-inspired aesthetics.
 */

// Core visualization variables
let container, scene, camera, renderer, controls;
let nodes = [], connections = [];
let raycaster, mouse, intersectedObject;
let visualizationReady = false;
let isAnimating = true;
let nodeGroups = {};
let selectedNode = null;
let memoryData = null;
let stats, clock;
let composer, effectFXAA, bloomPass;

// Visual settings
const settings = {
    backgroundColor: 0x070714,
    nodeColors: {
        memory: 0x4facfe,
        concept: 0xf8a5c2,
        reasoning: 0x43e97b,
        metadata: 0xfcda92
    },
    nodeSize: {
        min: 1.0,
        max: 4.0,
        default: 2.0
    },
    glowIntensity: 0.8,
    connectionOpacity: 0.6,
    maxConnections: 1000,
    maxNodes: 500,
    clusteringEnabled: true,
    pulseEffect: true,
    rotationSpeed: 0.001,
    zoomSpeed: 1.0,
    postProcessing: true,
    bloomStrength: 0.8,
    bloomRadius: 0.5,
    bloomThreshold: 0.2,
    fxaaEnabled: true
};

// Initialize the visualization
function initVisualization() {
    // Get the container
    container = document.getElementById('memory-visualization');
    if (!container) {
        console.error('Visualization container not found!');
        return;
    }

    // Initialize clock for animations
    clock = new THREE.Clock();

    // Initialize renderer with proper color management
    renderer = new THREE.WebGLRenderer({ 
        antialias: true, 
        alpha: true,
        powerPreference: 'high-performance',
        stencil: false,
        depth: true
    });
    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2)); // Limit for performance
    renderer.setSize(container.clientWidth, container.clientHeight);
    renderer.setClearColor(settings.backgroundColor, 1);
    renderer.shadowMap.enabled = true;
    renderer.shadowMap.type = THREE.PCFSoftShadowMap;
    
    // Set proper color output encoding (modern Three.js color management)
    renderer.outputColorSpace = THREE.SRGBColorSpace;
    
    // Enable high performance rendering
    renderer.info.autoReset = false;
    
    container.appendChild(renderer.domElement);

    // Initialize scene
    scene = new THREE.Scene();
    scene.fog = new THREE.FogExp2(settings.backgroundColor, 0.001);
    
    // Initialize camera with perspective
    camera = new THREE.PerspectiveCamera(60, container.clientWidth / container.clientHeight, 0.1, 1000);
    camera.position.set(0, 0, 100);
    camera.lookAt(0, 0, 0);

    // Initialize controls with modern approach
    controls = new THREE.OrbitControls(camera, renderer.domElement);
    controls.enableDamping = true;
    controls.dampingFactor = 0.1;
    controls.rotateSpeed = settings.zoomSpeed;
    controls.zoomSpeed = settings.zoomSpeed;
    controls.autoRotate = true;
    controls.autoRotateSpeed = 0.5;
    controls.minDistance = 20;
    controls.maxDistance = 200;
    controls.enablePan = true;
    controls.screenSpacePanning = true;
    controls.maxPolarAngle = Math.PI * 0.85; // Prevent going below the ground plane

    // Initialize raycaster for interaction
    raycaster = new THREE.Raycaster();
    mouse = new THREE.Vector2();

    // Add lighting
    addLighting();
    
    // Initialize post-processing effects
    if (settings.postProcessing) {
        initPostProcessing();
    }

    // Add event listeners
    window.addEventListener('resize', onWindowResize, false);
    container.addEventListener('mousemove', onMouseMove, false);
    container.addEventListener('click', onMouseClick, false);

    // Add UI controls
    setupUIControls();

    // Initialize node groups
    initNodeGroups();

    // Load sample data or connect to API
    loadMemoryData();

    // Mark visualization as ready
    visualizationReady = true;

    // Start render loop
    animate();

    // Log initialization
    console.log('THREE.js Memory Visualization initialized successfully (v3.0 with r173)');
} 