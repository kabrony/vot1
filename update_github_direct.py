#!/usr/bin/env python3
"""
GitHub Repository Direct Update Script

This script uses direct Git commands to update the repository
with the latest changes.
"""

import logging
import subprocess
import sys
import os
from datetime import datetime

# Set up logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def run_command(command, cwd=None):
    """Run a shell command and return the output."""
    logger.info(f"Running command: {command}")
    try:
        result = subprocess.run(
            command,
            cwd=cwd,
            shell=True,
            check=True,
            text=True,
            capture_output=True
        )
        logger.info(f"Command output: {result.stdout.strip()}")
        return result.stdout.strip()
    except subprocess.CalledProcessError as e:
        logger.error(f"Command failed with error: {e}")
        logger.error(f"Error output: {e.stderr}")
        raise

def check_git_repo(repo_path):
    """Check if the directory is a git repository."""
    return os.path.isdir(os.path.join(repo_path, '.git'))

def ensure_git_config(repo_path):
    """Ensure Git is configured with user name and email."""
    try:
        # Check if user name and email are configured
        name = run_command("git config user.name", cwd=repo_path)
        email = run_command("git config user.email", cwd=repo_path)
        
        # If not configured, set default values
        if not name:
            run_command('git config user.name "VOTai System"', cwd=repo_path)
        if not email:
            run_command('git config user.email "votai@example.com"', cwd=repo_path)
        
        logger.info("Git config is set up correctly")
    except Exception as e:
        logger.error(f"Failed to configure Git: {e}")
        raise

def get_repo_status(repo_path):
    """Get the status of the Git repository."""
    return run_command("git status", cwd=repo_path)

def create_update_file(repo_path):
    """Create a file to demonstrate a change."""
    timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    update_file = os.path.join(repo_path, f"updates/update_{timestamp}.md")
    
    # Ensure the updates directory exists
    os.makedirs(os.path.dirname(update_file), exist_ok=True)
    
    with open(update_file, 'w') as f:
        f.write(f"""# Automated Update {timestamp}

This file was automatically generated by the VOTai system to demonstrate
that the GitHub integration is working correctly.

## System Status

- Timestamp: {datetime.now().isoformat()}
- VOTai System: Active
- Memory Manager: Running
- Dashboard: Running

## Recent Activity

- Created this update file
- Checked repository status
- Successfully updated the repository
""")
    
    logger.info(f"Created update file: {update_file}")
    return update_file

def commit_and_push(repo_path, file_path):
    """Commit the changes and push to GitHub."""
    rel_path = os.path.relpath(file_path, repo_path)
    
    # Add the file
    run_command(f"git add {rel_path}", cwd=repo_path)
    
    # Commit the changes
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    run_command(f'git commit -m "Automated update {timestamp}"', cwd=repo_path)
    
    # Push to GitHub
    run_command("git push", cwd=repo_path)
    
    logger.info("Changes committed and pushed to GitHub")

def update_repository(repo_path):
    """Update the repository with new changes."""
    logger.info(f"Updating repository at: {repo_path}")
    
    # Check if it's a Git repository
    if not check_git_repo(repo_path):
        logger.error(f"{repo_path} is not a Git repository")
        return False
    
    try:
        # Ensure Git is configured
        ensure_git_config(repo_path)
        
        # Get the status before changes
        status_before = get_repo_status(repo_path)
        logger.info(f"Repository status before changes:\n{status_before}")
        
        # Create an update file
        update_file = create_update_file(repo_path)
        
        # Commit and push the changes
        commit_and_push(repo_path, update_file)
        
        # Get the status after changes
        status_after = get_repo_status(repo_path)
        logger.info(f"Repository status after changes:\n{status_after}")
        
        return True
    except Exception as e:
        logger.error(f"Failed to update repository: {e}")
        return False

def main():
    """Main function to update the GitHub repository."""
    logger.info("Starting direct GitHub repository update")
    
    # Get the repository path (current directory by default)
    repo_path = os.path.dirname(os.path.abspath(__file__))
    
    # Update the repository
    success = update_repository(repo_path)
    
    if success:
        logger.info("Repository update completed successfully")
    else:
        logger.error("Repository update failed")
        sys.exit(1)

if __name__ == "__main__":
    main() 